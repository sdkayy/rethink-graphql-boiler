#! /usr/bin/env node
const Mask = require('json-mask')
const Path = require('path')

const Migrations = require('../lib')

const internals = {}

internals.createOptions = {
  migrationsDirectory: {
    describe: 'Directory where migration files will be saved'
  },
  relativeTo: {
    describe: 'Root path from which migration directory will be searched'
  }
}

internals.migrateOptions = Object.assign({}, internals.createOptions, {
  driver: {
    describe: 'RethinkDB javascript driver. Can be either rethinkdb or rethinkdbdash. Defaults to rethinkdb, the official driver'
  },
  migrationsTable: {
    describe: 'Table where meta information about migrations will be saved. Defaults to _migrations'
  },
  host: {
    describe: 'The host to connect to, if using rethinkdb official driver. Defaults to localhost'
  },
  port: {
    describe: 'The port to connect on, if using rethinkdb official driver. Defaults to 28015'
  },
  db: {
    describe: 'Database name. Required (either via cli arguments, config file or env var)',
    alias: 'd'
  },
  user: { describe: 'RethinkDB user', alias: 'u' },
  username: { describe: 'RethinkDB username' },
  password: { describe: 'RethinkDB password', alias: 'p' },
  authKey: { describe: 'RethinkDB authKey' },
  discovery: {
    describe: 'Whether or not the driver should try to keep a list of updated hosts. Only for rethinkdbdash'
  },
  pool: {
    describe: 'Whether or not to use a connection pool when using rethinkdbdash driver. Default to false'
  },
  cursor: {
    describe: 'If true, cursors will not be automatically converted to arrays when using rethinkdbdash. Default to true.'
  }
})

/* eslint-disable no-unused-expressions */
require('yargs')
  .usage('Usage: $0 <command> [options]')
  .command({
    command: 'create <name>',
    desc: 'Creates a migration file from template, with the provided name',
    builder: internals.createOptions,
    handler: runCreate
  })
  .example('$0 create <name>', 'Creates a migration named <name>')
  .command({
    command: 'up',
    desc: 'Runs all new migrations up',
    builder: internals.migrateOptions,
    handler: runMigrations.bind(null, 'up')
  })
  .example('$0 up', 'Runs all new migrations up')
  .example('$0 up --step=<number>', 'Run just this number of new migrations up')
  .command({
    command: 'down',
    desc: 'Rollback all previously executed migrations',
    builder: internals.migrateOptions,
    handler: runMigrations.bind(null, 'down')
  })
  .number('step')
  .nargs('step', 1)
  .describe('step', 'Number of migrations to run, if omitted run or rollback all migrations')
  .example('$0 down', 'Runs all migrations down')
  .example('$0 down --step=<number>', 'Rollback just this number of previously executed migration files')
  .alias('f', 'file')
  .nargs('f', 1)
  .describe('f', 'Uses the provided file as the options to be used when migration is run')
  .alias('i', 'ignore-timestamp')
  .nargs('i', 0)
  .describe('i', 'Ignore timestamp when applying migrations')
  .help('h')
  .alias('h', 'help')
  .demandCommand(1)
  .argv

logger(Migrations.migrate.emitter)

function runCreate (argv) {
  const options = Mask(buildOptions(argv), 'name,migrationsDirectory,relativeTo')

  Migrations.create(options)
    .then((path) => console.log(`Created ${path}`))
    .catch(console.error.bind(null, 'Error while creating migrations:'))
}

function runMigrations (op, argv) {
  const options = buildOptions(argv)
  options.op = op

  Migrations.migrate(options)
    .then(() => console.log('Finished successfully'))
    .catch(console.error.bind(null, 'Error while running migrations:'))
}

function logger (emitter) {
  emitter.on('info', console.log)
  emitter.on('warn', console.log)
  emitter.on('error', console.error)
}

/**
 * Builds the options object that will be passed to the core module
 * Reads options from command line, config file (if provided) and env vars
 * Follows this rule of precedence: CLI > Config File > Env Vars
 * That means that an option passed as argument in the command line will override
 * an option present in the config file and also a environment variable, and so on
 */
function buildOptions (argv) {
  const optionsMask = 'name,migrationsDirectory,relativeTo,migrationsTable,host,port,db,user,username,password,authKey,driver,discovery,pool,cursor,servers,ssl,i,ignoreTimestamp,step'
  const envVars = Mask(process.env, optionsMask)
  const file = Mask(readOptionsFile(argv), optionsMask)
  const args = Mask(argv, optionsMask)

  // normalize the -i / --ignore-timestamp option to result to ignoreTimestamp option
  // for arguments input schema validation
  if (args.hasOwnProperty('i')) {
    delete args.i
    args.ignoreTimestamp = true
  }

  return Object.assign({}, envVars, file, args)
}

function readOptionsFile (argv) {
  if (!argv.f) {
    return {}
  }

  const filePath = Path.resolve(process.cwd(), argv.f)

  return require(filePath)
}
